// Code generated by Prisma (prisma@1.34.3). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  property: (where?: PropertyWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  property: (where: PropertyWhereUniqueInput) => PropertyNullablePromise;
  properties: (args?: {
    where?: PropertyWhereInput;
    orderBy?: PropertyOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Property>;
  propertiesConnection: (args?: {
    where?: PropertyWhereInput;
    orderBy?: PropertyOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PropertyConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createProperty: (data: PropertyCreateInput) => PropertyPromise;
  updateProperty: (args: {
    data: PropertyUpdateInput;
    where: PropertyWhereUniqueInput;
  }) => PropertyPromise;
  updateManyProperties: (args: {
    data: PropertyUpdateManyMutationInput;
    where?: PropertyWhereInput;
  }) => BatchPayloadPromise;
  upsertProperty: (args: {
    where: PropertyWhereUniqueInput;
    create: PropertyCreateInput;
    update: PropertyUpdateInput;
  }) => PropertyPromise;
  deleteProperty: (where: PropertyWhereUniqueInput) => PropertyPromise;
  deleteManyProperties: (where?: PropertyWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  property: (
    where?: PropertySubscriptionWhereInput
  ) => PropertySubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type PropertyOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "street_ASC"
  | "street_DESC"
  | "city_ASC"
  | "city_DESC"
  | "state_ASC"
  | "state_DESC"
  | "zip_ASC"
  | "zip_DESC"
  | "rent_ASC"
  | "rent_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "firstName_ASC"
  | "firstName_DESC"
  | "lastName_ASC"
  | "lastName_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type PropertyWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface PropertyWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  street?: Maybe<String>;
  street_not?: Maybe<String>;
  street_in?: Maybe<String[] | String>;
  street_not_in?: Maybe<String[] | String>;
  street_lt?: Maybe<String>;
  street_lte?: Maybe<String>;
  street_gt?: Maybe<String>;
  street_gte?: Maybe<String>;
  street_contains?: Maybe<String>;
  street_not_contains?: Maybe<String>;
  street_starts_with?: Maybe<String>;
  street_not_starts_with?: Maybe<String>;
  street_ends_with?: Maybe<String>;
  street_not_ends_with?: Maybe<String>;
  city?: Maybe<String>;
  city_not?: Maybe<String>;
  city_in?: Maybe<String[] | String>;
  city_not_in?: Maybe<String[] | String>;
  city_lt?: Maybe<String>;
  city_lte?: Maybe<String>;
  city_gt?: Maybe<String>;
  city_gte?: Maybe<String>;
  city_contains?: Maybe<String>;
  city_not_contains?: Maybe<String>;
  city_starts_with?: Maybe<String>;
  city_not_starts_with?: Maybe<String>;
  city_ends_with?: Maybe<String>;
  city_not_ends_with?: Maybe<String>;
  state?: Maybe<String>;
  state_not?: Maybe<String>;
  state_in?: Maybe<String[] | String>;
  state_not_in?: Maybe<String[] | String>;
  state_lt?: Maybe<String>;
  state_lte?: Maybe<String>;
  state_gt?: Maybe<String>;
  state_gte?: Maybe<String>;
  state_contains?: Maybe<String>;
  state_not_contains?: Maybe<String>;
  state_starts_with?: Maybe<String>;
  state_not_starts_with?: Maybe<String>;
  state_ends_with?: Maybe<String>;
  state_not_ends_with?: Maybe<String>;
  zip?: Maybe<String>;
  zip_not?: Maybe<String>;
  zip_in?: Maybe<String[] | String>;
  zip_not_in?: Maybe<String[] | String>;
  zip_lt?: Maybe<String>;
  zip_lte?: Maybe<String>;
  zip_gt?: Maybe<String>;
  zip_gte?: Maybe<String>;
  zip_contains?: Maybe<String>;
  zip_not_contains?: Maybe<String>;
  zip_starts_with?: Maybe<String>;
  zip_not_starts_with?: Maybe<String>;
  zip_ends_with?: Maybe<String>;
  zip_not_ends_with?: Maybe<String>;
  rent?: Maybe<Float>;
  rent_not?: Maybe<Float>;
  rent_in?: Maybe<Float[] | Float>;
  rent_not_in?: Maybe<Float[] | Float>;
  rent_lt?: Maybe<Float>;
  rent_lte?: Maybe<Float>;
  rent_gt?: Maybe<Float>;
  rent_gte?: Maybe<Float>;
  owner?: Maybe<UserWhereInput>;
  AND?: Maybe<PropertyWhereInput[] | PropertyWhereInput>;
  OR?: Maybe<PropertyWhereInput[] | PropertyWhereInput>;
  NOT?: Maybe<PropertyWhereInput[] | PropertyWhereInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  firstName?: Maybe<String>;
  firstName_not?: Maybe<String>;
  firstName_in?: Maybe<String[] | String>;
  firstName_not_in?: Maybe<String[] | String>;
  firstName_lt?: Maybe<String>;
  firstName_lte?: Maybe<String>;
  firstName_gt?: Maybe<String>;
  firstName_gte?: Maybe<String>;
  firstName_contains?: Maybe<String>;
  firstName_not_contains?: Maybe<String>;
  firstName_starts_with?: Maybe<String>;
  firstName_not_starts_with?: Maybe<String>;
  firstName_ends_with?: Maybe<String>;
  firstName_not_ends_with?: Maybe<String>;
  lastName?: Maybe<String>;
  lastName_not?: Maybe<String>;
  lastName_in?: Maybe<String[] | String>;
  lastName_not_in?: Maybe<String[] | String>;
  lastName_lt?: Maybe<String>;
  lastName_lte?: Maybe<String>;
  lastName_gt?: Maybe<String>;
  lastName_gte?: Maybe<String>;
  lastName_contains?: Maybe<String>;
  lastName_not_contains?: Maybe<String>;
  lastName_starts_with?: Maybe<String>;
  lastName_not_starts_with?: Maybe<String>;
  lastName_ends_with?: Maybe<String>;
  lastName_not_ends_with?: Maybe<String>;
  properties_every?: Maybe<PropertyWhereInput>;
  properties_some?: Maybe<PropertyWhereInput>;
  properties_none?: Maybe<PropertyWhereInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface PropertyCreateInput {
  id?: Maybe<ID_Input>;
  street: String;
  city: String;
  state: String;
  zip: String;
  rent?: Maybe<Float>;
  owner: UserCreateOneWithoutPropertiesInput;
}

export interface UserCreateOneWithoutPropertiesInput {
  create?: Maybe<UserCreateWithoutPropertiesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutPropertiesInput {
  id?: Maybe<ID_Input>;
  firstName: String;
  lastName: String;
}

export interface PropertyUpdateInput {
  street?: Maybe<String>;
  city?: Maybe<String>;
  state?: Maybe<String>;
  zip?: Maybe<String>;
  rent?: Maybe<Float>;
  owner?: Maybe<UserUpdateOneRequiredWithoutPropertiesInput>;
}

export interface UserUpdateOneRequiredWithoutPropertiesInput {
  create?: Maybe<UserCreateWithoutPropertiesInput>;
  update?: Maybe<UserUpdateWithoutPropertiesDataInput>;
  upsert?: Maybe<UserUpsertWithoutPropertiesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutPropertiesDataInput {
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
}

export interface UserUpsertWithoutPropertiesInput {
  update: UserUpdateWithoutPropertiesDataInput;
  create: UserCreateWithoutPropertiesInput;
}

export interface PropertyUpdateManyMutationInput {
  street?: Maybe<String>;
  city?: Maybe<String>;
  state?: Maybe<String>;
  zip?: Maybe<String>;
  rent?: Maybe<Float>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  firstName: String;
  lastName: String;
  properties?: Maybe<PropertyCreateManyWithoutOwnerInput>;
}

export interface PropertyCreateManyWithoutOwnerInput {
  create?: Maybe<
    PropertyCreateWithoutOwnerInput[] | PropertyCreateWithoutOwnerInput
  >;
  connect?: Maybe<PropertyWhereUniqueInput[] | PropertyWhereUniqueInput>;
}

export interface PropertyCreateWithoutOwnerInput {
  id?: Maybe<ID_Input>;
  street: String;
  city: String;
  state: String;
  zip: String;
  rent?: Maybe<Float>;
}

export interface UserUpdateInput {
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  properties?: Maybe<PropertyUpdateManyWithoutOwnerInput>;
}

export interface PropertyUpdateManyWithoutOwnerInput {
  create?: Maybe<
    PropertyCreateWithoutOwnerInput[] | PropertyCreateWithoutOwnerInput
  >;
  delete?: Maybe<PropertyWhereUniqueInput[] | PropertyWhereUniqueInput>;
  connect?: Maybe<PropertyWhereUniqueInput[] | PropertyWhereUniqueInput>;
  set?: Maybe<PropertyWhereUniqueInput[] | PropertyWhereUniqueInput>;
  disconnect?: Maybe<PropertyWhereUniqueInput[] | PropertyWhereUniqueInput>;
  update?: Maybe<
    | PropertyUpdateWithWhereUniqueWithoutOwnerInput[]
    | PropertyUpdateWithWhereUniqueWithoutOwnerInput
  >;
  upsert?: Maybe<
    | PropertyUpsertWithWhereUniqueWithoutOwnerInput[]
    | PropertyUpsertWithWhereUniqueWithoutOwnerInput
  >;
  deleteMany?: Maybe<PropertyScalarWhereInput[] | PropertyScalarWhereInput>;
  updateMany?: Maybe<
    | PropertyUpdateManyWithWhereNestedInput[]
    | PropertyUpdateManyWithWhereNestedInput
  >;
}

export interface PropertyUpdateWithWhereUniqueWithoutOwnerInput {
  where: PropertyWhereUniqueInput;
  data: PropertyUpdateWithoutOwnerDataInput;
}

export interface PropertyUpdateWithoutOwnerDataInput {
  street?: Maybe<String>;
  city?: Maybe<String>;
  state?: Maybe<String>;
  zip?: Maybe<String>;
  rent?: Maybe<Float>;
}

export interface PropertyUpsertWithWhereUniqueWithoutOwnerInput {
  where: PropertyWhereUniqueInput;
  update: PropertyUpdateWithoutOwnerDataInput;
  create: PropertyCreateWithoutOwnerInput;
}

export interface PropertyScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  street?: Maybe<String>;
  street_not?: Maybe<String>;
  street_in?: Maybe<String[] | String>;
  street_not_in?: Maybe<String[] | String>;
  street_lt?: Maybe<String>;
  street_lte?: Maybe<String>;
  street_gt?: Maybe<String>;
  street_gte?: Maybe<String>;
  street_contains?: Maybe<String>;
  street_not_contains?: Maybe<String>;
  street_starts_with?: Maybe<String>;
  street_not_starts_with?: Maybe<String>;
  street_ends_with?: Maybe<String>;
  street_not_ends_with?: Maybe<String>;
  city?: Maybe<String>;
  city_not?: Maybe<String>;
  city_in?: Maybe<String[] | String>;
  city_not_in?: Maybe<String[] | String>;
  city_lt?: Maybe<String>;
  city_lte?: Maybe<String>;
  city_gt?: Maybe<String>;
  city_gte?: Maybe<String>;
  city_contains?: Maybe<String>;
  city_not_contains?: Maybe<String>;
  city_starts_with?: Maybe<String>;
  city_not_starts_with?: Maybe<String>;
  city_ends_with?: Maybe<String>;
  city_not_ends_with?: Maybe<String>;
  state?: Maybe<String>;
  state_not?: Maybe<String>;
  state_in?: Maybe<String[] | String>;
  state_not_in?: Maybe<String[] | String>;
  state_lt?: Maybe<String>;
  state_lte?: Maybe<String>;
  state_gt?: Maybe<String>;
  state_gte?: Maybe<String>;
  state_contains?: Maybe<String>;
  state_not_contains?: Maybe<String>;
  state_starts_with?: Maybe<String>;
  state_not_starts_with?: Maybe<String>;
  state_ends_with?: Maybe<String>;
  state_not_ends_with?: Maybe<String>;
  zip?: Maybe<String>;
  zip_not?: Maybe<String>;
  zip_in?: Maybe<String[] | String>;
  zip_not_in?: Maybe<String[] | String>;
  zip_lt?: Maybe<String>;
  zip_lte?: Maybe<String>;
  zip_gt?: Maybe<String>;
  zip_gte?: Maybe<String>;
  zip_contains?: Maybe<String>;
  zip_not_contains?: Maybe<String>;
  zip_starts_with?: Maybe<String>;
  zip_not_starts_with?: Maybe<String>;
  zip_ends_with?: Maybe<String>;
  zip_not_ends_with?: Maybe<String>;
  rent?: Maybe<Float>;
  rent_not?: Maybe<Float>;
  rent_in?: Maybe<Float[] | Float>;
  rent_not_in?: Maybe<Float[] | Float>;
  rent_lt?: Maybe<Float>;
  rent_lte?: Maybe<Float>;
  rent_gt?: Maybe<Float>;
  rent_gte?: Maybe<Float>;
  AND?: Maybe<PropertyScalarWhereInput[] | PropertyScalarWhereInput>;
  OR?: Maybe<PropertyScalarWhereInput[] | PropertyScalarWhereInput>;
  NOT?: Maybe<PropertyScalarWhereInput[] | PropertyScalarWhereInput>;
}

export interface PropertyUpdateManyWithWhereNestedInput {
  where: PropertyScalarWhereInput;
  data: PropertyUpdateManyDataInput;
}

export interface PropertyUpdateManyDataInput {
  street?: Maybe<String>;
  city?: Maybe<String>;
  state?: Maybe<String>;
  zip?: Maybe<String>;
  rent?: Maybe<Float>;
}

export interface UserUpdateManyMutationInput {
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
}

export interface PropertySubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<PropertyWhereInput>;
  AND?: Maybe<
    PropertySubscriptionWhereInput[] | PropertySubscriptionWhereInput
  >;
  OR?: Maybe<PropertySubscriptionWhereInput[] | PropertySubscriptionWhereInput>;
  NOT?: Maybe<
    PropertySubscriptionWhereInput[] | PropertySubscriptionWhereInput
  >;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Property {
  id: ID_Output;
  street: String;
  city: String;
  state: String;
  zip: String;
  rent?: Float;
}

export interface PropertyPromise extends Promise<Property>, Fragmentable {
  id: () => Promise<ID_Output>;
  street: () => Promise<String>;
  city: () => Promise<String>;
  state: () => Promise<String>;
  zip: () => Promise<String>;
  rent: () => Promise<Float>;
  owner: <T = UserPromise>() => T;
}

export interface PropertySubscription
  extends Promise<AsyncIterator<Property>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  street: () => Promise<AsyncIterator<String>>;
  city: () => Promise<AsyncIterator<String>>;
  state: () => Promise<AsyncIterator<String>>;
  zip: () => Promise<AsyncIterator<String>>;
  rent: () => Promise<AsyncIterator<Float>>;
  owner: <T = UserSubscription>() => T;
}

export interface PropertyNullablePromise
  extends Promise<Property | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  street: () => Promise<String>;
  city: () => Promise<String>;
  state: () => Promise<String>;
  zip: () => Promise<String>;
  rent: () => Promise<Float>;
  owner: <T = UserPromise>() => T;
}

export interface User {
  id: ID_Output;
  firstName: String;
  lastName: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  properties: <T = FragmentableArray<Property>>(args?: {
    where?: PropertyWhereInput;
    orderBy?: PropertyOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  properties: <T = Promise<AsyncIterator<PropertySubscription>>>(args?: {
    where?: PropertyWhereInput;
    orderBy?: PropertyOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  properties: <T = FragmentableArray<Property>>(args?: {
    where?: PropertyWhereInput;
    orderBy?: PropertyOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface PropertyConnection {
  pageInfo: PageInfo;
  edges: PropertyEdge[];
}

export interface PropertyConnectionPromise
  extends Promise<PropertyConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PropertyEdge>>() => T;
  aggregate: <T = AggregatePropertyPromise>() => T;
}

export interface PropertyConnectionSubscription
  extends Promise<AsyncIterator<PropertyConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PropertyEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePropertySubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface PropertyEdge {
  node: Property;
  cursor: String;
}

export interface PropertyEdgePromise
  extends Promise<PropertyEdge>,
    Fragmentable {
  node: <T = PropertyPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PropertyEdgeSubscription
  extends Promise<AsyncIterator<PropertyEdge>>,
    Fragmentable {
  node: <T = PropertySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateProperty {
  count: Int;
}

export interface AggregatePropertyPromise
  extends Promise<AggregateProperty>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePropertySubscription
  extends Promise<AsyncIterator<AggregateProperty>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface PropertySubscriptionPayload {
  mutation: MutationType;
  node: Property;
  updatedFields: String[];
  previousValues: PropertyPreviousValues;
}

export interface PropertySubscriptionPayloadPromise
  extends Promise<PropertySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PropertyPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PropertyPreviousValuesPromise>() => T;
}

export interface PropertySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PropertySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PropertySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PropertyPreviousValuesSubscription>() => T;
}

export interface PropertyPreviousValues {
  id: ID_Output;
  street: String;
  city: String;
  state: String;
  zip: String;
  rent?: Float;
}

export interface PropertyPreviousValuesPromise
  extends Promise<PropertyPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  street: () => Promise<String>;
  city: () => Promise<String>;
  state: () => Promise<String>;
  zip: () => Promise<String>;
  rent: () => Promise<Float>;
}

export interface PropertyPreviousValuesSubscription
  extends Promise<AsyncIterator<PropertyPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  street: () => Promise<AsyncIterator<String>>;
  city: () => Promise<AsyncIterator<String>>;
  state: () => Promise<AsyncIterator<String>>;
  zip: () => Promise<AsyncIterator<String>>;
  rent: () => Promise<AsyncIterator<Float>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  firstName: String;
  lastName: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).
*/
export type Float = number;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Property",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `http://localhost:4466/onerent`
});
export const prisma = new Prisma();
